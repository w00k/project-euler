/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

pub fn problem002() {
    
    let mut sum: u32 = 0;
    let mut index: u32 = 0;
    let mut before_number: u32 = 0;
    let mut current_number: u32 = 0;
    let max_index: u32 = 4000000;

    loop {
        let aux_number = fibonacci(before_number, current_number, index);

        if aux_number >= max_index {
            break;
        }

        if is_even(aux_number) {
            sum += aux_number;
        }

        before_number = current_number;
        current_number = aux_number;
        index += 1;
    } 

    println!("the sum of all numbers even below {} in fibonacci sequence are {}", max_index, sum);

}

fn fibonacci(first: u32, second: u32, index: u32) -> u32 {
    if index == 0 {
        return 1;
    }
    if index == 1 {
        return 2;
    }
    return first + second;
}

fn is_even(number: u32) -> bool {
    if number % 2 == 0 {
        return true;
    }
    return false;
}